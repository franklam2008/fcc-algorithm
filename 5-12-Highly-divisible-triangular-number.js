function divisibleTriangleNumber(n) {
  var arr=[];
  var arr1=[];
  var trinum=0;
  var ans=false;
  var count=0
  var i=1;
  while(ans===false){
    trinum+=i;
    arr.push(trinum);
    var k=1;
    while(k<trinum){
      if(trinum%k===0){

        arr1.push(k);
      }
      k++;

    }
    if(arr1.length>=n){
      return trinum
    }
    console.log(trinum, arr1, arr1.length)
    arr1=[]

    i++;
  }



  return ans;
}

divisibleTriangleNumber(23);
/*divisibleTriangleNumber(5) should return 28.
divisibleTriangleNumber(23) should return 630.
divisibleTriangleNumber() should return 76576500.

Project Euler: Problem 12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1

3: 1, 3

6: 1, 2, 3, 6

10: 1, 2, 5, 10

15: 1, 3, 5, 15

21: 1, 3, 7, 21

28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?*/
function tau(num) {

    var n = num;
    var i = 2;
    var p = 1;

    if (num === 1) return 1;

    while (i * i <= n) {
        var c = 1;
        while (n % i === 0) {
            n/= i;
            c++;
        }
        i++;
        p*= c;
    }

    if (n === num || n > 1)
        p*= 1 + 1;

    return p;
}


function divisibleTriangleNumber(x) {

    var n = 1;
    var d = 1;

    while (tau(d) <= x) {
        n++;
        d+= n;
    }
    return d;
}
divisibleTriangleNumber(500);
